# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins

class MonoLiagndTransition:
    time: builtins.float
    target: MonoLigandState
    def __repr__(self) -> builtins.str:
        ...


class MonoLigand:
    r"""
    A particle that can attach to a receptor.
    
    This particle is a simple model of a ligand that can attach to a receptor. It has a binding
    strength that determines how likely it is to attach to a receptor, and a receptor density that
    determines how many receptors are available to attach to.
    """
    def __new__(cls,receptor_density:builtins.float, binding_strength:builtins.float, on_rate:builtins.float, off_rate:builtins.float): ...
    def simulate(self) -> MonoLigandSimulationSingle:
        r"""
        Create a new single-particle simulation from this particle.
        """
        ...

    def simulate_many(self, n:builtins.int) -> MonoLigandSimulation:
        r"""
        Create a new `n`-particle simulation from this particle.
        """
        ...

    def states(self) -> builtins.list[MonoLigandState]:
        r"""
        Enumeration of all possible states for the particle.
        """
        ...

    def event_probabilities(self, state:MonoLigandState) -> builtins.list[tuple[MonoLigandState, builtins.float]]:
        r"""
        A list of probabilities for each possible next state.
        
        If a state is not contained in the list it can be assumed is 0.
        """
        ...

    def __repr__(self) -> builtins.str:
        ...


class MonoLigandSimulation:
    def __new__(cls,particle:MonoLigand, n:builtins.int): ...
    def time(self) -> builtins.float:
        r"""
        The current time of the simulation.
        """
        ...

    def sample(self, samples:builtins.int) -> builtins.list[builtins.list[MonoLigandState]]:
        r"""
        Takes `n` evenly spaced samples between `0` and [`Self::time`], using
        [`Self::states_at_time`].
        """
        ...

    def thetas(self, samples:builtins.int) -> builtins.list[builtins.float]:
        r"""
        Returns the attachment percentage (theta), at evenly spaced samples (using [`Self::sample`]).
        """
        ...

    def last_states(self) -> builtins.list[MonoLigandState]:
        r"""
        Returns the states at the last point in the simulation.
        """
        ...

    def transition_histories(self) -> builtins.list[builtins.list[MonoLiagndTransition]]:
        r"""
        The transition histories of all simulations.
        
        Just in case, it is returned as a list of transition histories, not the other way around.
        """
        ...

    def last_theta(self) -> builtins.float:
        r"""
        Returns the attachment percentage at the last point in time (i.e., [`Self::time`]),
        commonly denoted with the greek theta (Î¸).
        """
        ...

    def advance_until(self, t:builtins.float) -> None:
        r"""
        Advances the simulation until a particular time.
        """
        ...

    def __repr__(self) -> builtins.str:
        ...


class MonoLigandSimulationSingle:
    transition_history: builtins.list[MonoLiagndTransition]
    def __new__(cls,particle:MonoLigand): ...
    def time(self) -> builtins.float:
        r"""
        The current time of the simulation.
        """
        ...

    def last_state(self) -> MonoLigandState:
        r"""
        The state of the particle at the last valid time.
        """
        ...

    def advance_until(self, t:builtins.float) -> None:
        ...

    def __repr__(self) -> builtins.str:
        ...


class MonoLigandState:
    def toggle(self) -> MonoLigandState:
        ...


